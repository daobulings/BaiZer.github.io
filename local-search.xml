<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTML基础入门</title>
    <link href="/2023/09/13/html%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/13/html%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础概念："><a href="#一、基础概念：" class="headerlink" title="一、基础概念："></a>一、基础概念：</h1><h3 id="1-什么是HTML？"><a href="#1-什么是HTML？" class="headerlink" title="1.什么是HTML？"></a>1.什么是HTML？</h3><p>HTML指的是超文本标记语言(Hyper Text Markup Language)，它是用来描述网页的一种语言。</p><p><em>所谓超文本，有两层含义：</em></p><ul><li>它可以加入图片、声音、动画、多媒体等内容（超越了文本的限制）。</li><li>它还可以从一个文件跳到另外一个文件，与世界各地的主机文件连接（超级链接文本）。</li></ul><h1 id="二、HTML的语法规范："><a href="#二、HTML的语法规范：" class="headerlink" title="二、HTML的语法规范："></a>二、HTML的语法规范：</h1><h3 id="1-基础语法概述："><a href="#1-基础语法概述：" class="headerlink" title="1.基础语法概述："></a>1.基础语法概述：</h3><ul><li>HTML标签是由<strong>尖括号包围的关键词</strong>，例如&lt; html &gt;。</li><li>HTML标签<strong>通常是成对出现的</strong>，例如&lt; html &gt;和&lt; &#x2F;html &gt;，我们称为双标签，标签中的第一个标签是开始标签，第二个是结束标签。</li><li>有些特殊的标签必须是单个标签，例如&lt; br&#x2F; &gt;，我们称为单标签。</li></ul><h3 id="2-标签关系："><a href="#2-标签关系：" class="headerlink" title="2.标签关系："></a>2.标签关系：</h3><p>双标签关系可以分为：<strong>包含关系</strong>和<strong>并列关系</strong>。</p><h1 id="三、标签："><a href="#三、标签：" class="headerlink" title="三、标签："></a>三、标签：</h1><h2 id="1-基础标签："><a href="#1-基础标签：" class="headerlink" title="1.基础标签："></a>1.基础标签：</h2><h4 id="①文档类型声明标签："><a href="#①文档类型声明标签：" class="headerlink" title="①文档类型声明标签："></a>①文档类型声明标签：</h4><p><em>作用是告诉浏览器使用哪种HTML版本来显示网页。</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPR <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上代码表达的意思是：当前页面采用HTML5版本来显示网页。<br><strong>注意：</strong></p><pre><code class="hljs"> 1.&lt;!DOCTYPE&gt;声明位于文档的最前面的位置，处于&lt; html &gt;标签之前。 2.&lt;!DOCTYPE&gt;不是一个HTML标签，它是文档类型声明标签。</code></pre><h4 id="②lang-语言种类："><a href="#②lang-语言种类：" class="headerlink" title="②lang 语言种类："></a>②lang 语言种类：</h4><p>用来定义当前文档显示的语言。</p><pre><code class="hljs"> 1. en定义语言为英语。 2. zh-CN定义语言为中文。</code></pre><p>其实对于文档显示来说，无论定义为英文文档或是中文文档，它们都是可以同时显示中文和英文的。</p><h4 id="③字符集："><a href="#③字符集：" class="headerlink" title="③字符集："></a>③字符集：</h4><p>字符集是多个字符的集合，以便计算机能够识别和存储各种文字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">可以通过&lt;meta&gt;标签的charset属性来规定HTML文档应该使用那种字符编码。</code></pre><p>一般情况下，使用的都是<strong>UTF-8</strong>编码。此外，还有GBK、GB2313等。</p><h2 id="2-常用标签："><a href="#2-常用标签：" class="headerlink" title="2.常用标签："></a>2.常用标签：</h2><h4 id="①标题标签："><a href="#①标题标签：" class="headerlink" title="①标题标签："></a>①标题标签：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单词head的缩写，意为头部、标题。<br><strong>标签解读</strong>：作为标题使用，并且从h1~h6重要性递减，字体变小，颜色变浅，同时一个标题独占一行。</p><h4 id="②段落和换行标签："><a href="#②段落和换行标签：" class="headerlink" title="②段落和换行标签："></a>②段落和换行标签：</h4><p>段落标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签解读</strong>：可以把HTML文档分割成若干段落；文本在一个段落中会根据浏览器窗口大小自动换行，段落和段落之间留有空隙。</p><p>换行标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签解读</strong>：强制换行；就是在段落之中另起新的一行显示。</p><h4 id="③文本格式化标签："><a href="#③文本格式化标签：" class="headerlink" title="③文本格式化标签："></a>③文本格式化标签：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>或者<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">标签解读：加粗标签，推荐使用前者，语义更强烈。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>或者<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">标签解读：倾斜标签，推荐使用前者，语义更强烈。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span>或者<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">标签解读：删除线标签，推荐使用前者，语义更强烈。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span>或者<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">标签解读：下划线标签，推荐使用前者，语义更强烈。</code></pre><h4 id="④-div-和-span-标签："><a href="#④-div-和-span-标签：" class="headerlink" title="④&lt; div &gt;和&lt; span &gt;标签："></a>④&lt; div &gt;和&lt; span &gt;标签：</h4><p>这两个标签是没有语义的，它们就是一个盒子，是用来装内容的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是头部<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>今日价格<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签解读：</strong></p><ul><li>&lt; div &gt;标签用来布局，但是一行只能放一个&lt; div &gt;。&#x3D;&#x3D;大盒子&#x3D;&#x3D;</li><li>&lt; span &gt;标签用来布局，一行可以多个&lt; span &gt;。&#x3D;&#x3D;小盒子&#x3D;&#x3D;</li></ul><h4 id="⑤图像标签和路径："><a href="#⑤图像标签和路径：" class="headerlink" title="⑤图像标签和路径："></a>⑤图像标签和路径：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签解读</strong>：&#x3D;&#x3D;src&#x3D;&#x3D;是&lt; img &gt; 标签的必须属性，用于<strong>指定图像文件的路径和文件名。</strong></p><h6 id="相关属性："><a href="#相关属性：" class="headerlink" title="相关属性："></a>相关属性：</h6><p><em>alt属性：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;文本内容&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">添加alt属性后，当图片无法显示时，则会显示出alt属性内的文本内容。</code></pre><p><em>title属性：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;文本内容&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示文本&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">添加title属性后，将鼠标放置在图片上时，会提示title属性的文本内容。</code></pre><p><em>width属性：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;文本内容&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示文本&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">添加width属性后，可以给图像设定宽度大小，同时会对高度等比例缩放可以根据自己的需要设定具体的数值。</code></pre><p><em>height属性：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;文本内容&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示文本&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">添加height属性后，可以给图像设定高度大小，同时会对宽度等比例缩放可以根据自己的需要设定具体的数值。</code></pre><p><em>border属性：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;文本内容&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示文本&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;15&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">添加border属性之后，可以对图像添加一个边框，border属性内的数值就是边框的粗细大小。</code></pre><p><strong>注意：</strong></p><ol><li>图像标签可以拥有多个属性，必须写在标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性采取键值对的格式，即是一个属性对应一个属性值。</li></ol><h6 id="路径："><a href="#路径：" class="headerlink" title="路径："></a>路径：</h6><p>1.相对路径：所谓相对路径，就是<strong>图片相对于HTML页面的位置</strong>。</p><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件同一级 如&lt; img src&#x3D;”baidu.gif” &#x2F;&gt;</td></tr><tr><td>下一级路径</td><td>&#x2F;</td><td>图像文件位于HTML文件下一级 如&lt; img src&#x3D;”images&#x2F;baidu.gif” &#x2F;&gt;</td></tr><tr><td>上一级路径</td><td>..&#x2F;</td><td>图像文件位于HTML文件上一级 如&lt; img src&#x3D;”..&#x2F;baidu.gif” &#x2F;&gt;</td></tr></tbody></table><p>2.绝对路径：所谓绝对路径，是指目录下的绝对位置，直接到达目标位置，<strong>通常是从盘符开始的路径。</strong></p><pre><code class="hljs">例如：&quot;D:\web\img\logo.gif&quot;或完整的网络地址&quot;http://www.itcast.cn/images/logo.gif&quot;.</code></pre><h4 id="⑥超链接标签："><a href="#⑥超链接标签：" class="headerlink" title="⑥超链接标签："></a>⑥超链接标签：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签解读</strong>：在HTML标签中，该标签用于定义超链接，作用是从一个页面链接到另一个页面。</p><h6 id="链接的语法格式："><a href="#链接的语法格式：" class="headerlink" title="链接的语法格式："></a>链接的语法格式：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;跳转目标&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span> 文本或图像 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>两个属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能。</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中_self为默认值（当前页面打开），_blank为在新窗口中打开方式。</td></tr></tbody></table><h6 id="链接的分类："><a href="#链接的分类：" class="headerlink" title="链接的分类："></a>链接的分类：</h6><ol><li><p><strong>外部链接</strong>：例如&lt; a href&#x3D;”<a href="http://www.baidu.com">百度">http://www.baidu.com&quot;&gt;百度</a>&lt; &#x2F;a &gt;。</p></li><li><p><strong>内部链接</strong>：网站内部页面之间的相互链接，直接链接内部页面名称即可，例如&lt; a href&#x3D;”index.html”&gt;首页&lt; &#x2F;a &gt;。</p></li><li><p><strong>空链接</strong>：如果当时没有确定的链接目标时，&lt; a href&#x3D;”#”&gt;首页&lt; &#x2F;a &gt;。</p></li><li><p><strong>下载链接</strong>：如果href里面的地址是一个文件或者压缩包，会下载这个文件。例如：&lt; a href&#x3D;”img.zip”&gt; 下载文件&lt; &#x2F;a&gt;。</p></li><li><p><strong>网页元素链接</strong>：在网页中的各种元素，如文本、图像、表格、音频、视频等都可以添加超链接。只需将文本、图片等元素写在&#x3D;&#x3D;文本或图像&#x3D;&#x3D;的位置即可。</p></li><li><p><strong>锚点链接</strong>：当我们点击链接，可以快速定位到页面中的某个位置。</p><pre><code class="hljs">1.在链接文本的href属性中，设置属性值为#名字的形式，如&lt; a href=&quot;#two&quot;&gt;第二集&lt; /a &gt;2.找到目标位置标签，里面添加一个id属性 = 刚才的名字，如&lt; h3 id=&quot;two&quot;&gt;第二集介绍&lt; /h3 &gt;</code></pre></li></ol><h4 id="⑦注释标签和特殊字符："><a href="#⑦注释标签和特殊字符：" class="headerlink" title="⑦注释标签和特殊字符："></a>⑦注释标签和特殊字符：</h4><p><em>注释</em>：</p><p>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p><pre><code class="hljs">&lt;!-- 注释语句 --&gt;快捷键：ctrl + /</code></pre><p><em>特殊字符</em>：</p><p>在HTML中，一些特殊的字符很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p><table><thead><tr><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td>空格符</td><td>&amp;nbsp ;</td></tr><tr><td>小于号</td><td>&amp;lt ;</td></tr><tr><td>大于号</td><td>&amp;gt ;</td></tr><tr><td>和号</td><td>&amp;amp ;</td></tr><tr><td>人民币</td><td>&amp;yen ;</td></tr><tr><td>版权</td><td>&amp;copy ;</td></tr><tr><td>注册商标</td><td>&amp;reg ;</td></tr><tr><td>摄氏度</td><td>&amp;deg ;</td></tr><tr><td>正负号</td><td>&amp;plusmn ;</td></tr><tr><td>乘号</td><td>&amp;times ;</td></tr><tr><td>除号</td><td>&amp;divide ;</td></tr><tr><td>平方2（上标2）</td><td>&amp;sup2 ;</td></tr><tr><td>平方3（上标3）</td><td>&amp;sup3 ;</td></tr></tbody></table><pre><code class="hljs">注意：上表中为了能使代码显现。都在&quot; ; &quot;前，加了一个空格，实际使用中要去掉。</code></pre><h4 id="⑧表格标签："><a href="#⑧表格标签：" class="headerlink" title="⑧表格标签："></a>⑧表格标签：</h4><p>表格的作用：主要用于<strong>显示、展示数据</strong>，因为它可以让数据显示的非常规整，可读性好。</p><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">1.&lt;table&gt; &lt;/table&gt;是用于定义表格的标签。2.&lt;tr&gt; &lt;/tr&gt;标签用于定义表格中的行，必须嵌套在&lt;table&gt; &lt;/table&gt;标签中。3.&lt;td&gt; &lt;/td&gt;用于定义表格中的单元格，必须嵌套在&lt;tr&gt; &lt;/tr&gt;标签中。4.字母td指表格数据(table data)，即数据单元格的内容。</code></pre><h4 id="⑨表头单元格标签："><a href="#⑨表头单元格标签：" class="headerlink" title="⑨表头单元格标签："></a>⑨表头单元格标签：</h4><p>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示。</p><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;th&gt;标签表示HTML表格的表头部分。（table head）的缩写。</code></pre><h6 id="表格的属性：（不常用，一般在CSS中设置）"><a href="#表格的属性：（不常用，一般在CSS中设置）" class="headerlink" title="表格的属性：（不常用，一般在CSS中设置）"></a>表格的属性：（不常用，一般在CSS中设置）</h6><pre><code class="hljs">注意：下面的属性要写在&lt;table&gt;里面。</code></pre><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式。</td></tr><tr><td>border</td><td>1或””</td><td>规定表格单元是否拥有边框，默认为””，表示没有边框。</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素。</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素。</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度。</td></tr></tbody></table><h4 id="⑩表格结构标签："><a href="#⑩表格结构标签：" class="headerlink" title="⑩表格结构标签："></a>⑩表格结构标签：</h4><p>当表格很长时，为了更好的表示表格的语义，可以将表格分割成<strong>表格头部</strong>和<strong>表格主体</strong>两大部分。</p><pre><code class="hljs">在表格标签中，使用：&lt;thead&gt;标签表示表格的头部区域、&lt;tbody&gt;标签表示表格的主体区域。1.&lt;thead&gt;&lt;/thead&gt;:用于定义表格的头部。&lt;thead&gt;内部必须拥有&lt;tr&gt;标签。一般位于第一行。2.&lt;tbody&gt;&lt;/tbody&gt;:用于定义表格的主体，主要用于放数据本体。</code></pre><h4 id="⑪合并单元格："><a href="#⑪合并单元格：" class="headerlink" title="⑪合并单元格："></a>⑪合并单元格：</h4><p>特殊情况下，可以把多个单元格合并为一个单元格。</p><h6 id="合并单元格方式："><a href="#合并单元格方式：" class="headerlink" title="合并单元格方式："></a>合并单元格方式：</h6><ul><li>跨行合并：rowspan&#x3D;”合并单元格的个数”</li><li>跨列合并：colspan&#x3D;”合并单元格的个数”</li></ul><h6 id="目标单元格："><a href="#目标单元格：" class="headerlink" title="目标单元格："></a>目标单元格：</h6><ul><li>跨行：最上侧单元格为目标单元格，写合并代码</li><li>跨列：最左侧单元格为目标单元格，写合并代码</li></ul><h6 id="合并单元格三部曲："><a href="#合并单元格三部曲：" class="headerlink" title="合并单元格三部曲："></a>合并单元格三部曲：</h6><ul><li>先确定是跨行还是跨列合并。</li><li>找到目标单元格。写上合并方式&#x3D;合并单元格的数量。比如：&lt; td colspan&#x3D;”2” &gt;&lt; &#x2F;td&gt;。</li><li>删除多余的单元格。</li></ul><h4 id="⑫列表标签："><a href="#⑫列表标签：" class="headerlink" title="⑫列表标签："></a>⑫列表标签：</h4><p>表格是用来显示数据的，那么列表就<strong>是用来布局的</strong>。<br><strong>列表</strong>最大的特点就是整齐、整洁、有序，它作为布局会更加的自由和方便。</p><h6 id="无序列表：（重点）"><a href="#无序列表：（重点）" class="headerlink" title="无序列表：（重点）"></a>无序列表：（重点）</h6><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;ul&gt;标签表示HTML页面中的无序列表，一般会以项目符号呈现列表项，而列表项使用&lt;li&gt;标签定义。</code></pre><p>注意：</p><pre><code class="hljs"> 1. 无序列表的各个列表项之间没有顺序级别之分，是并列的。2. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。3. &lt;li&gt;和&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。4. 无序列表会带有自己的样式，但在实际使用时，我们会使用CSS来设置，所以无序列表自己的样式就会去掉。</code></pre><h6 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h6><p>有序列表即为排列有顺序的列表，其各个列表项会按照一定的顺序排列定义。</p><p>基础语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;ol&gt;标签用于定义有序列表，列表排序以数字来显示，并且使用&lt;li&gt;标签来定义列表项。</code></pre><p>注意：</p><pre><code class="hljs">1. &lt;ol&gt;&lt;/ol&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或者文字的做法是不被允许的。2. &lt;li&gt;和&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。3.有序列表会带有自己的样式，但在实际使用时，我们会使用CSS来设置。</code></pre><h6 id="自定义列表：（重点）"><a href="#自定义列表：（重点）" class="headerlink" title="自定义列表：（重点）"></a>自定义列表：（重点）</h6><p>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><p>基础语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;dl&gt;标签用于定义描述列表（或定义列表），该标签会与&lt;dt&gt;（定义项目/名字）和&lt;dd&gt;（描述每一个项目/名字）一起使用。</code></pre><p>注意：</p><pre><code class="hljs">1.&lt;dl&gt;&lt;/dl&gt;里面只能包含&lt;dt&gt;和&lt;dd&gt;。2.&lt;dt&gt;和&lt;dd&gt;个数没有限制，经常是一个&lt;dt&gt;对应多个&lt;dd&gt;。</code></pre><h4 id="⑬表单标签："><a href="#⑬表单标签：" class="headerlink" title="⑬表单标签："></a>⑬表单标签：</h4><p>使用目的：&#x3D;&#x3D;收集用户信息&#x3D;&#x3D;<br>组成：由&#x3D;&#x3D;表单域、表单控件（也叫表单元素）和提示信息&#x3D;&#x3D;3个部分构成。</p><h5 id="表单域："><a href="#表单域：" class="headerlink" title="表单域："></a>表单域：</h5><p>&#x3D;&#x3D;表单域&#x3D;&#x3D;是一个包含表单元素的区域。</p><pre><code class="hljs">在HTML标签中，&lt;form&gt;标签用于定义表单域，以实现用户信息的收集和传递。&lt;form&gt;会把它范围内的表单元素信息提交给服务器。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接受并处理表单数据的服务器程序的url地址。</td></tr><tr><td>method</td><td>get&#x2F;post</td><td>用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域。</td></tr></tbody></table><h5 id="表单控件（表单元素）："><a href="#表单控件（表单元素）：" class="headerlink" title="表单控件（表单元素）："></a>表单控件（表单元素）：</h5><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p><h6 id="input-表单元素："><a href="#input-表单元素：" class="headerlink" title="&lt; input&gt;表单元素："></a>&lt; input&gt;表单元素：</h6><pre><code class="hljs">&lt;input&gt;标签用于收集用户信息。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;属性值&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在该标签中，包含一个&#x3D;&#x3D;type&#x3D;&#x3D;属性，根据不同的type属性值，输入字段拥有很多种方式（可以是<strong>文本字段、复选框、按钮、掩码后的文本控件</strong>等）。</p><p>注意：</p><pre><code class="hljs">&lt;input /&gt;标签为单标签。type属性设置不同的属性值来指定不同的控件类型。</code></pre><p>&#x3D;&#x3D;type属性值如下：&#x3D;&#x3D;</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮（多数形况下，通过JS启动脚本）。</td></tr><tr><td>checkbox</td><td>定义复选框。</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传。</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段。</td></tr><tr><td>image</td><td>定义图像形式的提交按钮。</td></tr><tr><td>password</td><td>定义密码字段。该字段中的字符被掩码。</td></tr><tr><td>radio</td><td>定义单选按钮。（多选一）</td></tr><tr><td>reset</td><td>定义重置按钮。重置按钮会清除表单中的所有数据。</td></tr><tr><td>submit</td><td>定义提交按钮。提交按钮会把表单数据发送到服务器。</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符，</td></tr></tbody></table><pre><code class="hljs">除type属性之外，&lt;input&gt;标签还有其他很多属性，其常用属性如下：</code></pre><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户定义</td><td>定义input的元素名称。</td></tr><tr><td>value</td><td>由用户定义</td><td>规定input元素的值。</td></tr><tr><td>checked</td><td>checked</td><td>规定此input元素首次加载时应当被选中。</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度。</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>如果想要<strong>实现性别的单选按钮</strong>，在选择了type的属性为&#x3D;&#x3D;radio&#x3D;&#x3D;之后，还需要给&lt; input&gt; 标签添加一个name属性，同时这几个性别单选按钮的<strong>name属性值要相同</strong>，才能实现单选的效果。（同理，&#x3D;&#x3D;复选框要实现相同的效果也要采用这样的方法&#x3D;&#x3D;。）</li><li>在增加了value值之后，相应的表单就会具有相应的值，但是只有text文本框才可以显示出来值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">imput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>checked属性主要针对单选按钮和复选框</strong>，主要作用是一打开页面，就要可以默认选中某个表单元素。格式为&#x3D;&#x3D;checked&#x3D;”checked”&#x3D;&#x3D;。</li><li><strong>maxlength</strong>是用户可以在表单元素中输入的最大字符数，一般较少使用。</li></ol><p><strong>&lt; label&gt;标签：</strong></p><pre><code class="hljs">&lt;label&gt;标签是input元素定义标注（标签）。&lt;label&gt;标签常用于绑定一个表单元素，当点击&lt;label&gt;标签内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上。</code></pre><p>基础语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">核心：&lt;label&gt;标签的for属性应当与相关元素的id属性相同。</code></pre><h6 id="select下拉表元素："><a href="#select下拉表元素：" class="headerlink" title="select下拉表元素："></a>select下拉表元素：</h6><p>使用场景：</p><pre><code class="hljs">在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用&lt;select&gt;标签控件定义下拉列表。</code></pre><p>基础语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><pre><code class="hljs">1.&lt;select&gt;中至少包含一对&lt;option&gt;。2.在&lt;option&gt;中定义属性：selected = &quot;selected&quot;时，当前项即为默认选中项。</code></pre><h6 id="textarea文本域元素："><a href="#textarea文本域元素：" class="headerlink" title="textarea文本域元素："></a>textarea文本域元素：</h6><p>使用场景：</p><pre><code class="hljs">当用户输入内容较多时，我们就不能使用文本输入框表单了，此时我们要使用&lt;textarea&gt;标签。在表单元素中，&lt;textarea&gt;是用于定义多行文本输入的控件。（常见于留言板，评论等）</code></pre><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">clos</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><pre><code class="hljs">1.通过&lt;textarea&gt;标签可以轻松的创建多行文本输入框。2.clos=&quot;每行中的字符数&quot;，rows=&quot;显示的行数&quot;（我们在实际开发中都是使用CSS来改变大小，不使用这个）。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何将我的服务开放给用户：构建API接口和用户认证的实践指南</title>
    <link href="/2023/09/04/post/"/>
    <url>/2023/09/04/post/</url>
    
    <content type="html"><![CDATA[<h1 id="一、构建API接口："><a href="#一、构建API接口：" class="headerlink" title="一、构建API接口："></a>一、构建API接口：</h1><h2 id="1-什么是API？"><a href="#1-什么是API？" class="headerlink" title="1.什么是API？"></a>1.什么是API？</h2><p>API是<strong>应用程序编程接口</strong>的缩写，是一些预先定义的函数，或指软件系统不同组成部分衔接的约定，用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程，而又无需访问原码，或理解内部工作机制的细节。</p><p>API本身是抽象的，它仅定义了一个界面，而不涉及应用程序在实际实现过程中的具体操作。其主要目的是让应用程式开发人员得以呼叫一组例程功能，而无须考虑其底层的原始码为何、或理解其内部工作机制的细节。</p><h2 id="2-构建基础API："><a href="#2-构建基础API：" class="headerlink" title="2.构建基础API："></a>2.构建基础API：</h2><p>在使用GO语言创建简单API时，需要使用标准库中的net&#x2F;http包来处理HTTP请求和响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">package main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br>func <span class="hljs-title function_">helloHandler</span>(<span class="hljs-params">w http.ResponseWriter, r *http.Request</span>) &#123;<br>    fmt.<span class="hljs-title class_">Fprintf</span>(w, <span class="hljs-string">&quot;Hello！&quot;</span>)<br>&#125;<br><br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    http.<span class="hljs-title class_">HandleFunc</span>(<span class="hljs-string">&quot;/&quot;</span>, helloHandler)<br>    http.<span class="hljs-title class_">ListenAndServe</span>(<span class="hljs-string">&quot;:8080&quot;</span>, nil)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时，我们运行程序并打开<a href="https://link.juejin.cn/?target=http://localhost:8080/" title="http://localhost:8080/">http://localhost:8080/</a>，就可以看到“Hello!” ，现在已经成功创建了一个基础的API。</p><h2 id="3-RESTful-API："><a href="#3-RESTful-API：" class="headerlink" title="3.RESTful API："></a>3.RESTful API：</h2><p>RESTful API是一种设计风格，用于构建网络应用程序接口（API）。它基于 Representational State Transfer (REST) 架构风格，提供了一种清晰、一致和预定义的方法来通过网络进行数据交互。</p><p>RESTful API具有以下特点：</p><ol><li>统一接口：RESTful API使用统一的接口，这意味着无论传递的数据类型如何，都使用相同的请求方法和HTTP协议。这使得客户端和服务器之间的交互更加简单和一致。</li><li>客户端-服务器分离：RESTful API遵循客户端-服务器分离原则，客户端负责发送请求并接收响应，而服务器负责处理请求和提供数据。这种分离有助于实现模块化、可扩展和可维护的API。</li><li>无状态通信：RESTful API通信是无状态的，这意味着每次请求都包含所有必要的信息，服务器不会保留与客户端的任何会话状态。这种设计使得API能够更好地处理高并发请求，并且易于扩展。</li><li>资源标识：RESTful API使用统一资源标识符，通常使用URL来标识每个资源。URL提供了明确的位置和标识符，使得客户端能够轻松地找到并访问所需的数据。</li><li>统一数据表示：RESTful API使用统一的数据表示，这意味着传递的数据都采用标准的格式（如JSON）。这有助于简化客户端和服务器之间的交互，并使得API更易于使用和理解。</li></ol><p>常见的RESTful API方法包括：</p><ol><li>GET：用于从服务器获取特定资源的信息。</li><li>POST：用于向服务器发送数据以创建新资源。</li><li>PUT：用于向服务器发送数据以更新现有资源。</li><li>DELETE：用于从服务器删除特定资源。</li><li>PATCH：用于对现有资源进行部分更新。</li><li>OPTIONS：用于获取特定资源的支持的请求方法。</li><li>HEAD：用于获取特定资源的元数据信息。</li></ol><p>通过遵循RESTful设计风格，API能够提供清晰、一致和可扩展的接口，使得客户端能够轻松地与服务器进行交互，实现数据共享和处理。</p><h2 id="4-使用Gin优化接口："><a href="#4-使用Gin优化接口：" class="headerlink" title="4.使用Gin优化接口："></a>4.使用Gin优化接口：</h2><p>Gin是一个Go语言的微型Web框架，它使用路由来处理HTTP请求，并提供了中间件支持、模板引擎和数据库集成等常用功能。</p><p>Gin框架的特点如下：</p><ol><li>快速高效：Gin框架基于Go语言的高性能特性，处理HTTP请求的速度非常快。</li><li>灵活路由：支持多种路由注册方式，可以轻松实现复杂的路由需求。</li><li>中间件支持：类似于Java中的Spring Boot，提供了许多中间件集成，如JWT验证、Gzip压缩、CORS跨域等。</li><li>模板引擎：内置了多种模板引擎，如HTML、JSON等，可以轻松地渲染输出数据。</li><li>数据库集成：支持多种数据库操作，如MySQL、PostgreSQL等，可以通过Gin提供的数据库操作封装类进行数据库操作。</li></ol><p><strong>安装Gin：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">go get -u github.<span class="hljs-property">com</span>/gin-gonic/gin<br></code></pre></td></tr></table></figure><p><strong>优化：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br><span class="hljs-string">&quot;fmt&quot;</span>  <br><span class="hljs-string">&quot;log&quot;</span>  <br><span class="hljs-string">&quot;net/http&quot;</span>  <br>)  <br>  <br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;  <br>http.<span class="hljs-title class_">HandleFunc</span>(<span class="hljs-string">&quot;/&quot;</span>, handleRequest)  <br>log.<span class="hljs-title class_">Fatal</span>(http.<span class="hljs-title class_">ListenAndServe</span>(<span class="hljs-string">&quot;:8080&quot;</span>, nil))  <br>&#125;  <br>  <br>func <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params">w http.ResponseWriter, r *http.Request</span>) &#123;  <br><span class="hljs-keyword">switch</span> r.<span class="hljs-property">Method</span> &#123;  <br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;GET&quot;</span>:  <br><span class="hljs-comment">// 处理GET请求  </span><br>fmt.<span class="hljs-title class_">Fprint</span>(w, <span class="hljs-string">&quot;Hello, this is a GET request&quot;</span>)  <br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;POST&quot;</span>:  <br><span class="hljs-comment">// 处理POST请求  </span><br>fmt.<span class="hljs-title class_">Fprint</span>(w, <span class="hljs-string">&quot;Hello, this is a POST request&quot;</span>)  <br><span class="hljs-attr">default</span>:  <br><span class="hljs-comment">// 处理其他请求方法  </span><br>fmt.<span class="hljs-title class_">Fprint</span>(w, <span class="hljs-string">&quot;Unsupported HTTP method&quot;</span>)  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们首先使用<code>http.HandleFunc</code>函数将处理函数<code>handleRequest</code>与根路径”&#x2F;“关联起来。然后，通过调用<code>http.ListenAndServe</code>函数来启动一个HTTP服务器，监听端口8080。当有请求到达时，<code>handleRequest</code>函数将被调用，根据请求的方法（GET或POST）执行相应的逻辑，并将结果通过响应返回给客户端。</p><h1 id="二、用户认证："><a href="#二、用户认证：" class="headerlink" title="二、用户认证："></a>二、用户认证：</h1><h2 id="1-什么是用户认证？"><a href="#1-什么是用户认证？" class="headerlink" title="1.什么是用户认证？"></a>1.什么是用户认证？</h2><p>用户认证是确认用户身份的过程，确保只有合法用户可以访问你的服务。在API开放给公众使用时，用户认证尤为重要，防止未经授权的访问和滥用。</p><h2 id="2-用户认证方式："><a href="#2-用户认证方式：" class="headerlink" title="2.用户认证方式："></a>2.用户认证方式：</h2><ol><li><strong>令牌认证</strong>：令牌认证，就是准确的说应该是“Bearer authentication”，Bearer意思就是承载的意思，那么令牌认证可以理解为承载有权访问某资源的令牌。</li><li><strong>API密钥认证</strong>：API密钥认证使用率非常高，而且也非常灵活，先来看一下API密钥认证是如何工作的：客户端先去向授权服务器请求到API KEY生成后的KEY可以入库记录，客户端访问API服务的带上API KEY，此API KEY由数字和字母组成，一般至少30个字符长。</li><li><strong>基本认证</strong>：用户通过在请求头中提供用户名和密码进行认证。但是这种方式不够安全，因为密码是明文传输的，容易被截获。</li></ol><h2 id="3-使用API实现用户身份认证："><a href="#3-使用API实现用户身份认证：" class="headerlink" title="3.使用API实现用户身份认证："></a>3.使用API实现用户身份认证：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br><span class="hljs-string">&quot;crypto/hmac&quot;</span>  <br><span class="hljs-string">&quot;crypto/sha256&quot;</span>  <br><span class="hljs-string">&quot;encoding/hex&quot;</span>  <br><span class="hljs-string">&quot;fmt&quot;</span>  <br><span class="hljs-string">&quot;net/http&quot;</span>  <br>)  <br>  <br><span class="hljs-comment">// 定义用户结构体  </span><br>type <span class="hljs-title class_">User</span> struct &#123;  <br><span class="hljs-variable constant_">ID</span> uint <span class="hljs-string">`json:&quot;id&quot;`</span>  <br><span class="hljs-title class_">APIKey</span> string <span class="hljs-string">`json:&quot;api_key&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-comment">// 生成API密钥  </span><br>func <span class="hljs-title function_">generateAPIKey</span>(userID uint) string &#123;  <br><span class="hljs-comment">// 在这里实现生成API密钥的逻辑，可以根据用户ID或其他信息生成唯一的API密钥  </span><br><span class="hljs-comment">// 这里只是简单地将用户ID转换为字符串作为示例  </span><br>apiKey := fmt.<span class="hljs-title class_">Sprintf</span>(<span class="hljs-string">&quot;%d&quot;</span>, userID)  <br><span class="hljs-keyword">return</span> apiKey  <br>&#125;  <br>  <br><span class="hljs-comment">// 验证API密钥  </span><br>func <span class="hljs-title function_">verifyAPIKey</span>(user *<span class="hljs-title class_">User</span>, apiKey string) bool &#123;  <br>generatedAPIKey := <span class="hljs-title function_">generateAPIKey</span>(user.<span class="hljs-property">ID</span>)  <br><span class="hljs-keyword">return</span> apiKey == generatedAPIKey  <br>&#125;  <br>  <br><span class="hljs-comment">// 处理请求并验证API密钥  </span><br>func <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params">w http.ResponseWriter, r *http.Request</span>) &#123;  <br>userID := r.<span class="hljs-title class_">FormValue</span>(<span class="hljs-string">&quot;user_id&quot;</span>) <span class="hljs-comment">// 从请求中获取用户ID  </span><br>user := &amp;<span class="hljs-title class_">User</span>&#123;<span class="hljs-attr">ID</span>: <span class="hljs-title function_">uint</span>(userID)&#125; <span class="hljs-comment">// 创建用户结构体实例  </span><br>apiKey := r.<span class="hljs-title class_">FormValue</span>(<span class="hljs-string">&quot;api_key&quot;</span>) <span class="hljs-comment">// 从请求中获取API密钥  </span><br><span class="hljs-keyword">if</span> <span class="hljs-title function_">verifyAPIKey</span>(<span class="hljs-params">user, apiKey</span>) &#123;  <br>fmt.<span class="hljs-title class_">Fprintln</span>(w, <span class="hljs-string">&quot;API Key验证成功&quot;</span>)  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>fmt.<span class="hljs-title class_">Fprintln</span>(w, <span class="hljs-string">&quot;API Key验证失败&quot;</span>)  <br>&#125;  <br>&#125;  <br>  <br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;  <br>http.<span class="hljs-title class_">HandleFunc</span>(<span class="hljs-string">&quot;/api/verify&quot;</span>, handleRequest) <span class="hljs-comment">// 设置请求处理程序  </span><br>http.<span class="hljs-title class_">ListenAndServe</span>(<span class="hljs-string">&quot;:8080&quot;</span>, nil) <span class="hljs-comment">// 启动服务器，监听端口8080  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们首先定义了一个<code>User</code>结构体，其中包含用户ID和API密钥字段。然后，我们实现了<code>generateAPIKey</code>函数来根据用户ID生成唯一的API密钥。接下来，我们实现了<code>verifyAPIKey</code>函数来验证给定的API密钥是否与用户ID生成的API密钥匹配。最后，我们使用<code>http.HandleFunc</code>函数将处理程序绑定到<code>/api/verify</code>路径上，并使用<code>http.ListenAndServe</code>函数启动服务器。当客户端发送带有用户ID和API密钥的GET请求到<code>/api/verify</code>路径时，服务器将验证API密钥的有效性并返回相应的结果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/12/hello-world/"/>
    <url>/2023/08/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
