<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何将我的服务开放给用户：构建API接口和用户认证的实践指南</title>
    <link href="/2023/09/04/post/"/>
    <url>/2023/09/04/post/</url>
    
    <content type="html"><![CDATA[<h1 id="一、构建API接口："><a href="#一、构建API接口：" class="headerlink" title="一、构建API接口："></a>一、构建API接口：</h1><h2 id="1-什么是API？"><a href="#1-什么是API？" class="headerlink" title="1.什么是API？"></a>1.什么是API？</h2><p>API是<strong>应用程序编程接口</strong>的缩写，是一些预先定义的函数，或指软件系统不同组成部分衔接的约定，用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程，而又无需访问原码，或理解内部工作机制的细节。</p><p>API本身是抽象的，它仅定义了一个界面，而不涉及应用程序在实际实现过程中的具体操作。其主要目的是让应用程式开发人员得以呼叫一组例程功能，而无须考虑其底层的原始码为何、或理解其内部工作机制的细节。</p><h2 id="2-构建基础API："><a href="#2-构建基础API：" class="headerlink" title="2.构建基础API："></a>2.构建基础API：</h2><p>在使用GO语言创建简单API时，需要使用标准库中的net&#x2F;http包来处理HTTP请求和响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">package main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br>func <span class="hljs-title function_">helloHandler</span>(<span class="hljs-params">w http.ResponseWriter, r *http.Request</span>) &#123;<br>    fmt.<span class="hljs-title class_">Fprintf</span>(w, <span class="hljs-string">&quot;Hello！&quot;</span>)<br>&#125;<br><br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    http.<span class="hljs-title class_">HandleFunc</span>(<span class="hljs-string">&quot;/&quot;</span>, helloHandler)<br>    http.<span class="hljs-title class_">ListenAndServe</span>(<span class="hljs-string">&quot;:8080&quot;</span>, nil)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时，我们运行程序并打开<a href="https://link.juejin.cn/?target=http://localhost:8080/" title="http://localhost:8080/">http://localhost:8080/</a>，就可以看到“Hello!” ，现在已经成功创建了一个基础的API。</p><h2 id="3-RESTful-API："><a href="#3-RESTful-API：" class="headerlink" title="3.RESTful API："></a>3.RESTful API：</h2><p>RESTful API是一种设计风格，用于构建网络应用程序接口（API）。它基于 Representational State Transfer (REST) 架构风格，提供了一种清晰、一致和预定义的方法来通过网络进行数据交互。</p><p>RESTful API具有以下特点：</p><ol><li>统一接口：RESTful API使用统一的接口，这意味着无论传递的数据类型如何，都使用相同的请求方法和HTTP协议。这使得客户端和服务器之间的交互更加简单和一致。</li><li>客户端-服务器分离：RESTful API遵循客户端-服务器分离原则，客户端负责发送请求并接收响应，而服务器负责处理请求和提供数据。这种分离有助于实现模块化、可扩展和可维护的API。</li><li>无状态通信：RESTful API通信是无状态的，这意味着每次请求都包含所有必要的信息，服务器不会保留与客户端的任何会话状态。这种设计使得API能够更好地处理高并发请求，并且易于扩展。</li><li>资源标识：RESTful API使用统一资源标识符，通常使用URL来标识每个资源。URL提供了明确的位置和标识符，使得客户端能够轻松地找到并访问所需的数据。</li><li>统一数据表示：RESTful API使用统一的数据表示，这意味着传递的数据都采用标准的格式（如JSON）。这有助于简化客户端和服务器之间的交互，并使得API更易于使用和理解。</li></ol><p>常见的RESTful API方法包括：</p><ol><li>GET：用于从服务器获取特定资源的信息。</li><li>POST：用于向服务器发送数据以创建新资源。</li><li>PUT：用于向服务器发送数据以更新现有资源。</li><li>DELETE：用于从服务器删除特定资源。</li><li>PATCH：用于对现有资源进行部分更新。</li><li>OPTIONS：用于获取特定资源的支持的请求方法。</li><li>HEAD：用于获取特定资源的元数据信息。</li></ol><p>通过遵循RESTful设计风格，API能够提供清晰、一致和可扩展的接口，使得客户端能够轻松地与服务器进行交互，实现数据共享和处理。</p><h2 id="4-使用Gin优化接口："><a href="#4-使用Gin优化接口：" class="headerlink" title="4.使用Gin优化接口："></a>4.使用Gin优化接口：</h2><p>Gin是一个Go语言的微型Web框架，它使用路由来处理HTTP请求，并提供了中间件支持、模板引擎和数据库集成等常用功能。</p><p>Gin框架的特点如下：</p><ol><li>快速高效：Gin框架基于Go语言的高性能特性，处理HTTP请求的速度非常快。</li><li>灵活路由：支持多种路由注册方式，可以轻松实现复杂的路由需求。</li><li>中间件支持：类似于Java中的Spring Boot，提供了许多中间件集成，如JWT验证、Gzip压缩、CORS跨域等。</li><li>模板引擎：内置了多种模板引擎，如HTML、JSON等，可以轻松地渲染输出数据。</li><li>数据库集成：支持多种数据库操作，如MySQL、PostgreSQL等，可以通过Gin提供的数据库操作封装类进行数据库操作。</li></ol><p><strong>安装Gin：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">go get -u github.<span class="hljs-property">com</span>/gin-gonic/gin<br></code></pre></td></tr></table></figure><p><strong>优化：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br><span class="hljs-string">&quot;fmt&quot;</span>  <br><span class="hljs-string">&quot;log&quot;</span>  <br><span class="hljs-string">&quot;net/http&quot;</span>  <br>)  <br>  <br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;  <br>http.<span class="hljs-title class_">HandleFunc</span>(<span class="hljs-string">&quot;/&quot;</span>, handleRequest)  <br>log.<span class="hljs-title class_">Fatal</span>(http.<span class="hljs-title class_">ListenAndServe</span>(<span class="hljs-string">&quot;:8080&quot;</span>, nil))  <br>&#125;  <br>  <br>func <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params">w http.ResponseWriter, r *http.Request</span>) &#123;  <br><span class="hljs-keyword">switch</span> r.<span class="hljs-property">Method</span> &#123;  <br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;GET&quot;</span>:  <br><span class="hljs-comment">// 处理GET请求  </span><br>fmt.<span class="hljs-title class_">Fprint</span>(w, <span class="hljs-string">&quot;Hello, this is a GET request&quot;</span>)  <br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;POST&quot;</span>:  <br><span class="hljs-comment">// 处理POST请求  </span><br>fmt.<span class="hljs-title class_">Fprint</span>(w, <span class="hljs-string">&quot;Hello, this is a POST request&quot;</span>)  <br><span class="hljs-attr">default</span>:  <br><span class="hljs-comment">// 处理其他请求方法  </span><br>fmt.<span class="hljs-title class_">Fprint</span>(w, <span class="hljs-string">&quot;Unsupported HTTP method&quot;</span>)  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们首先使用<code>http.HandleFunc</code>函数将处理函数<code>handleRequest</code>与根路径”&#x2F;“关联起来。然后，通过调用<code>http.ListenAndServe</code>函数来启动一个HTTP服务器，监听端口8080。当有请求到达时，<code>handleRequest</code>函数将被调用，根据请求的方法（GET或POST）执行相应的逻辑，并将结果通过响应返回给客户端。</p><h1 id="二、用户认证："><a href="#二、用户认证：" class="headerlink" title="二、用户认证："></a>二、用户认证：</h1><h2 id="1-什么是用户认证？"><a href="#1-什么是用户认证？" class="headerlink" title="1.什么是用户认证？"></a>1.什么是用户认证？</h2><p>用户认证是确认用户身份的过程，确保只有合法用户可以访问你的服务。在API开放给公众使用时，用户认证尤为重要，防止未经授权的访问和滥用。</p><h2 id="2-用户认证方式："><a href="#2-用户认证方式：" class="headerlink" title="2.用户认证方式："></a>2.用户认证方式：</h2><ol><li><strong>令牌认证</strong>：令牌认证，就是准确的说应该是“Bearer authentication”，Bearer意思就是承载的意思，那么令牌认证可以理解为承载有权访问某资源的令牌。</li><li><strong>API密钥认证</strong>：API密钥认证使用率非常高，而且也非常灵活，先来看一下API密钥认证是如何工作的：客户端先去向授权服务器请求到API KEY生成后的KEY可以入库记录，客户端访问API服务的带上API KEY，此API KEY由数字和字母组成，一般至少30个字符长。</li><li><strong>基本认证</strong>：用户通过在请求头中提供用户名和密码进行认证。但是这种方式不够安全，因为密码是明文传输的，容易被截获。</li></ol><h2 id="3-使用API实现用户身份认证："><a href="#3-使用API实现用户身份认证：" class="headerlink" title="3.使用API实现用户身份认证："></a>3.使用API实现用户身份认证：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br><span class="hljs-string">&quot;crypto/hmac&quot;</span>  <br><span class="hljs-string">&quot;crypto/sha256&quot;</span>  <br><span class="hljs-string">&quot;encoding/hex&quot;</span>  <br><span class="hljs-string">&quot;fmt&quot;</span>  <br><span class="hljs-string">&quot;net/http&quot;</span>  <br>)  <br>  <br><span class="hljs-comment">// 定义用户结构体  </span><br>type <span class="hljs-title class_">User</span> struct &#123;  <br><span class="hljs-variable constant_">ID</span> uint <span class="hljs-string">`json:&quot;id&quot;`</span>  <br><span class="hljs-title class_">APIKey</span> string <span class="hljs-string">`json:&quot;api_key&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-comment">// 生成API密钥  </span><br>func <span class="hljs-title function_">generateAPIKey</span>(userID uint) string &#123;  <br><span class="hljs-comment">// 在这里实现生成API密钥的逻辑，可以根据用户ID或其他信息生成唯一的API密钥  </span><br><span class="hljs-comment">// 这里只是简单地将用户ID转换为字符串作为示例  </span><br>apiKey := fmt.<span class="hljs-title class_">Sprintf</span>(<span class="hljs-string">&quot;%d&quot;</span>, userID)  <br><span class="hljs-keyword">return</span> apiKey  <br>&#125;  <br>  <br><span class="hljs-comment">// 验证API密钥  </span><br>func <span class="hljs-title function_">verifyAPIKey</span>(user *<span class="hljs-title class_">User</span>, apiKey string) bool &#123;  <br>generatedAPIKey := <span class="hljs-title function_">generateAPIKey</span>(user.<span class="hljs-property">ID</span>)  <br><span class="hljs-keyword">return</span> apiKey == generatedAPIKey  <br>&#125;  <br>  <br><span class="hljs-comment">// 处理请求并验证API密钥  </span><br>func <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params">w http.ResponseWriter, r *http.Request</span>) &#123;  <br>userID := r.<span class="hljs-title class_">FormValue</span>(<span class="hljs-string">&quot;user_id&quot;</span>) <span class="hljs-comment">// 从请求中获取用户ID  </span><br>user := &amp;<span class="hljs-title class_">User</span>&#123;<span class="hljs-attr">ID</span>: <span class="hljs-title function_">uint</span>(userID)&#125; <span class="hljs-comment">// 创建用户结构体实例  </span><br>apiKey := r.<span class="hljs-title class_">FormValue</span>(<span class="hljs-string">&quot;api_key&quot;</span>) <span class="hljs-comment">// 从请求中获取API密钥  </span><br><span class="hljs-keyword">if</span> <span class="hljs-title function_">verifyAPIKey</span>(<span class="hljs-params">user, apiKey</span>) &#123;  <br>fmt.<span class="hljs-title class_">Fprintln</span>(w, <span class="hljs-string">&quot;API Key验证成功&quot;</span>)  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>fmt.<span class="hljs-title class_">Fprintln</span>(w, <span class="hljs-string">&quot;API Key验证失败&quot;</span>)  <br>&#125;  <br>&#125;  <br>  <br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;  <br>http.<span class="hljs-title class_">HandleFunc</span>(<span class="hljs-string">&quot;/api/verify&quot;</span>, handleRequest) <span class="hljs-comment">// 设置请求处理程序  </span><br>http.<span class="hljs-title class_">ListenAndServe</span>(<span class="hljs-string">&quot;:8080&quot;</span>, nil) <span class="hljs-comment">// 启动服务器，监听端口8080  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们首先定义了一个<code>User</code>结构体，其中包含用户ID和API密钥字段。然后，我们实现了<code>generateAPIKey</code>函数来根据用户ID生成唯一的API密钥。接下来，我们实现了<code>verifyAPIKey</code>函数来验证给定的API密钥是否与用户ID生成的API密钥匹配。最后，我们使用<code>http.HandleFunc</code>函数将处理程序绑定到<code>/api/verify</code>路径上，并使用<code>http.ListenAndServe</code>函数启动服务器。当客户端发送带有用户ID和API密钥的GET请求到<code>/api/verify</code>路径时，服务器将验证API密钥的有效性并返回相应的结果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/12/hello-world/"/>
    <url>/2023/08/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
